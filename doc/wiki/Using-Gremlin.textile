!https://github.com/tinkerpop/gremlin/raw/master/doc/images/gremlin-logo.png!

<div style="width:425px" id="__ss_3876581"><strong style="display:block;margin:12px 0 4px"><a href="http://www.slideshare.net/slidarko/gremlin-a-graphbased-programming-language-3876581" title="Gremlin: A Graph-Based Programming Language">Gremlin: A Graph-Based Programming Language</a></strong><object id="__sse3876581" width="425" height="355"><param name="movie" value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=cnls-gremlin-2010-100427185653-phpapp02&stripped_title=gremlin-a-graphbased-programming-language-3876581&userName=slidarko" /><param name="allowFullScreen" value="true"/><param name="allowScriptAccess" value="always"/><embed name="__sse3876581" src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=cnls-gremlin-2010-100427185653-phpapp02&stripped_title=gremlin-a-graphbased-programming-language-3876581&userName=slidarko" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="355"></embed></object><div style="padding:5px 0 12px">View more <a href="http://www.slideshare.net/">presentations</a> from <a href="http://www.slideshare.net/slidarko">Marko Rodriguez</a>.</div></div>

"Gremlin":http://gremlin.tinkerpop.com is a "Turing complete":http://en.wikipedia.org/wiki/Turing_completeness, graph-based programming language developed for "property graphs":http://wiki.github.com/tinkerpop/gremlin/defining-a-property-graph. The "Turing complete" aspect of Gremlin means that it can be used to perform any arbitrary computation on a graph. As such, in combination with Rexster, Gremlin allows users to execute ad-hoc computations on the graph backend. 

# "Gremlin Use-Cases":#usecases
# "Example Gremlin Script in URI":#example
# "Gremlin Traversal API":#api
# "Using Multi-Line Scripts":#multiline

h2(#usecases). Gremlin Use-Cases

Through Gremlin, its possible, amongst other things, to perform the following tasks:

* Add/delete vertices and edges from the graph (see "Handling Vertices and Edges":http://wiki.github.com/tinkerpop/gremlin/handling-vertices-and-edges)
* Manipulate the graph indices (see "Handling Graph Indices":http://wiki.github.com/tinkerpop/gremlin/handling-graph-indices)
* Search for elements of a graph (see "Graph Grammars and Automata":http://wiki.github.com/tinkerpop/gremlin/graph-grammars-and-automata) 
* Load graph data from a file or URL (see "GraphML Reader and Writer Library":http://wiki.github.com/tinkerpop/blueprints/graphml-reader-and-writer-library)
* Make use of "JUNG":http://jung.sourceforge.net/ algorithms (see "Working with JUNG Algorithms":http://wiki.github.com/tinkerpop/gremlin/working-with-jung-algorithms)
* Make use of "SPARQL":http://www.w3.org/TR/rdf-sparql-query/ queries over OpenRDF-based graphs (see "Sesame SAIL Quad Store":http://wiki.github.com/tinkerpop/gremlin/sesame-sail-quad-store)
* Make use of the Gremlin function library (see "Gremlin Function Library":http://wiki.github.com/tinkerpop/gremlin/gremlin-function-library)
* and much, much more.

In general, using the @GremlinTraversal@ service provided with Rexster, various graph management tasks can be accomplished.

h2(#example). Example Gremlin Script in URI

Here is a simple ad-hoc query as an example of how Gremlin can be a useful Rexster service. Get the the vertex with @name@ Dark Star.

bc. http://localhost:8182/gratefulgraph/traversals/gremlin?script=g:key-v%28%27name%27,%27DARK%20STAR%27%29[0]

```javascript
{
  "results": [{
    "_type":"vertex",
    "_id":"89",
    "name":"DARK STAR",
    "song_type":"original",
    "performances":219,
    "type":"song"}
  ],
  "query_time":6.753024,
  "success":true,
  "version":"0.1"
}
```

The following script will determine the names of all the songs that follow "Dark Star":http://en.wikipedia.org/wiki/Dark_Star_%28song%29. In non-URI converted syntax, the Gremlin code in Rexster looks as such.

bc. http://localhost:8182/gratefulgraph/traversals/gremlin?script=g:key-v('name','DARK STAR')[0]/outE[@label='followed_by']/inV/@name

The Gremlin specific code is defined by the value of the @script@ query parameter. In isolation:

bc. g:key-v('name','DARK STAR')[0]/outE[@label='followed_by']/inV/@name

Once formatted to be compliant as a URI, the call to the @GremlinTraversal@ service looks as follows.

bc. http://localhost:8182/gratefulgraph/traversals/gremlin?script=g:key-v%28%27name%27,%27DARK%20STAR%27%29[0]/outE[@label=%27followed_by%27]/inV/@name

h2(#api). Gremlin Traversal API

To see the full API of the @GremlinTraversal@ service, simply call the service without any query parameters.

bc. http://localhost:8182/gratefulgraph/traversals/gremlin

The returned JSON is provided below.

```javascript
{
   "message":"no script provided",
   "query_time":3,
   "api":{
      "description":"evaluate an ad-hoc Gremlin script",
      "parameters":{
         "root.<key>":"the elements to set $_ to, where <key> is the element property key",
         "allow_cached":"allow a previously cached result to be provided (default is true)",
         "return_keys":"the element property keys to return (default is to return all element properties)",
         "script":"the Gremlin script to be evaluated"
      }
   },
   "success":false
}
```

h3. The Root Parameter

The parameter @root@ can be used to identify which elements in the graph to set the reserved Gremlin variable @$_@ to. By specifying an extension to @root@ (e.g. @name@), the roots with the specified value for the key @name@ are retrieved from the graph index. As such, the previous Dark Star script can be represented as follows:

bc. http://localhost:8182/gratefulgraph/traversals/gremlin?root.name=DARK STAR&script=./outE[@label='followed_by']/inV/@name

bc. http://localhost:8182/gratefulgraph/traversals/gremlin?root.name=DARK%20STAR&script=./outE[@label=%27followed_by%27]/inV/@name

Another example is provided to help elucidate this point. The following query counts the number of songs in the graph.

bc. http://localhost:8182/gratefulgraph/traversals/gremlin?root.type=song&script=g:count(.)

bc. http://localhost:8182/gratefulgraph/traversals/gremlin?root.type=song&script=g:count%28.%29

The result of this script is provided below.

```javascript
{
   "results":[
      584
   ],
   "query_time":12.68992,
   "success":true
}
```

h3. The Return Keys Parameter

Finally, @return_keys@ allows one to specify how to construct a JSON object representation of a returned @Element@ (i.e. @Vertex@ or @Edge@). All elements are returned as JSON objects with the properties identified by the @return_keys@ array being what is included in the JSON representation. The wildcard @*@ denotes to return all properties of the element.

bc. http://localhost:8182/gratefulgraph/traversals/gremlin?script=g:key-v%28%27name%27,%27STANDING%20ON%20THE%20MOON%27%29[0]

```javascript
{
  "results":[{
    "_type":"vertex",
    "_id":"92",
    "name":"STANDING ON THE MOON",
    "song_type":"original",
    "performances":75,
    "type":"song"}
  ],
  "query_time":16.916992,
  "success":true,
  "version":"0.1"
}
```

bc. http://localhost:8182/gratefulgraph/traversals/gremlin?script=g:key-v%28%27name%27,%27STANDING%20ON%20THE%20MOON%27%29[0]&return_keys=[name,performances]

```javascript
{
  "results":[{
    "_type":"vertex",
    "name":"STANDING ON THE MOON",
    "performances":75}
  ],
  "query_time":20.205824,
  "success":true,
  "version":"0.1"
}
```

h2(#multiline). Using Multi-Line Scripts 

For multi-line constructs, its possible to use tools like "cURL":http://en.wikipedia.org/wiki/CURL to post JSON to the traversal service instead of relying on the conversion of the URI query parameters to be mapped to JSON (see [[Mapping a URI to JSON]]). However, you can also use newline characters in your URI. For example, suppose the following script.

bc. step singer-writer
  ./inE[@label='sung_by']/outV/outE[@label='written_by']/inV
  end
g:dedup(./singer-writer/@name)

To find all the writers of songs that are sung by "Jerry Garcia":http://en.wikipedia.org/wiki/Jerry_Garcia, use the following URI.

bc. http://localhost:8182/gratefulgraph/traversals/gremlin?root.name=Garcia&script=step%20singer-writer%0D%0A./inE[@label=%27sung_by%27]/outV/outE[@label=%27written_by%27]/inV%0D%0Aend%0D%0Ag:dedup%28./singer-writer/@name%29

```javascript
{
  "results":[
    true,
    "Elizabeth_Cotten",
    "Bernette_Vorzon",
    "Jones_Shade",
    "Lennon_McCartney",
    "Unknown",
    "Robinson_Cleveland",
    "J_Babcock",
    "Valler_Meaux",
    "Grateful_Dead",
    "Garcia",
  ... ],
  "success":true,
  "query_time":31.269888,
  "version":"0.1"
}
```