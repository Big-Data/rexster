!https://github.com/tinkerpop/rexster/raw/master/doc/images/dog-burying-bone.png!

Rexster caches previously computing results. When an analogous request is made, the default behavior is for the cached result to be returned instead of recomputing the result. This section discusses the Rexster cache system and its variables.

# "Analogous Requests":#analogous
# "Avoiding the Cache":#avoid
# "Tuning the Cache":#tuning

h2(#analogous). Analogous Requests

Assume the two following request URIs.

bc. http://localhost:8182/graphname/test?key1=value1&key2=value2

bc. http://localhost:8182/graphname/test?key2=value2&key1=value1

To the Rexster cache system, these two URIs are considered identical. Even though the string match of these two URIs is different, they yield the same parameters to the @test@ traversal. Thus, if the first URI was referenced and then the second, the second request would return the cached results from the first request.

*NOTE*: each traversal can determine what is meant by an "analogous" URI. For example, @AbstractRankTraversals@ ignore @offset.end@ and @offset.start@ parameters. Moreover, @AbstractTraversal@ ignores @allow_cached@.

h2(#avoid). Avoiding the Cache

In many situations, its desirable to recompute a result instead of retrieving a previously cached result. Reasons to avoid recomputing a result may be because a the backend graph was recently updated (e.g. a vertex or edge was added). Thus, in such situations, the previously computing result of a traversal may be stale. In order to ignore a cached result simply add the query parameter and value @allow_cached=false@. The result of this request is use as the new cached value (overriding any previously computing result for the analogous URI).

h2(#tuning). Tuning the Cache

The @rexster.xml@ file provides the following tunable element.

# @<cache-maxsize>@: The number of stored results allowed in the cache. When the cache reaches its capacity, older results are cleared.